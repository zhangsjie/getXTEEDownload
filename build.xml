<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<project basedir="." default="jar" name="getXTEEDownload">
	<property name="src" value="src" />
	<property name="bin" value="bin/" />
	<!--构造打包时Class-Path需要的路径 -->
	<!--pathconvert用于对目录进行组合 property即这个组合的名字，pathsep作用是各个文件之间的分隔符， 如果不写，在windows平台默认是分号。但时在MANIFEST.MF这个文件中，各个jar包之间要用空格区分， 
		因此。这里就写成空格了 -->
	<pathconvert property="lib" pathsep=" ">
		<!--mapper,对路径组合方式进行控制 -->
		<mapper>
			<!--chainedmapper 作用是联合多个mapper -->
			<chainedmapper>
				<!--过滤文件，将路径去掉，只保留文件名 -->
				<flattenmapper />
				<!--过滤+转换器，将所有的文件名前面都加上一个lib，我们知道lib目录下面有jar包， lib/*的作用其实是将jar包名与路径进行组合形成如：lib/google.jar这样的相对路径 -->
				<globmapper from="*" to="lib/*" />
			</chainedmapper>
		</mapper>
		<!--按照mapper定义的格式组合lib目录下面的所有jar文件，形成诸如lib/jar1.jar lib/jar2.jar的字符串 -->
		<fileset dir="lib">
			<include name="*.jar" />
		</fileset>
	</pathconvert>

	<!--组合各个路径，构成MANIFEST.MF文件中Class-Path所需的字符串-->
	<property name="libs" value="${lib} " />

	<!--打印一下刚才构造好的字符串，看看是否符合要求-->
	<echo>libs   ${libs}</echo>
	<!-- 构造打包时Class-Path需要的路径 结束-->

	<!--创建编译任务，名字是compile,depends指定了comiple任务依赖init任务-->
	<target name="compile" depends="cleanup" description="comile target">
		<!--javac，编译，对应java中的javac命令。  
	 	        其中srcdir定义源文件路径 destdir定义编译后文件路径，  
	 	        includeantruntime作用是指定编译任务是否包含ant的classpath,可有可无，不影响编译，  
	 	        但不写可能会出现警告，为了眼不见心不烦，加上吧-->
		<javac srcdir="${src}" destdir="${bin}" includeantruntime="true">
			<!--给编译器指定编码，防止出现："警告： 编码 GBK 的不可映射字符"-->
			<compilerarg line="-encoding UTF-8 " />
			<!-- classpath 定义编译需要的claspath -->
			<classpath>
				<fileset dir="lib">
					<include name="*.jar" />
				</fileset>
			</classpath>
		</javac>
	</target>
	<!--定义jarfilename，准备进行打包操作。其中ant.project.name是ant默认的一个变量，值为最上面定义的project的name  
	    ${DSTAMP}为日期，格式为20111123；${TSTAMP}为时间，格式为2256，表示22点56分。  
	        -->
	<property name="jarfilename" value="getXTEEApi.jar" />
	<!--打包开始，名字为jar，依赖任务为compile-->
	<target name="jar" depends="compile">
		<!--jar操作，jarfile指定jar包存放路径，basedir为编译后的class的目录-->
		<jar jarfile="${jarfilename}" basedir="${bin}">
			<!--就是<zipgroupfileset>这个标签可以把我们指定的jar一起包到我们的目的Jar中了，这样当我们运行main.jar的时候就不会出现第三方类找不到的错误了。-->
			<zipgroupfileset dir="lib" includes="*.jar" /> 		
			<!--为jar包指定manifest，当然，如果jar包不需要打成runnable的形式，manifest可以不要-->
			<manifest>
				<!--指定main-class-->
				<attribute name="Main-Class" value="XTEEDownload.XTEE" />
				<!--指定Class-Path-->
				<attribute name="Class-Path" value="${lib}" />
			</manifest>
		</jar>
	</target>



	<target name="cleanup">
		<!-- 删除编译文件夹 -->
		<!-- 可以以递归的方式删除目录 -->
		<delete dir="${bin}/*" />
	</target>


</project>
